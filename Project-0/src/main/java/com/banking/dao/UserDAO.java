/**
 * 
 */
package com.banking.dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.ArrayList;
import java.util.List;

import com.banking.beans.UserBean;
import com.banking.io.ConnectionFactory;

import oracle.jdbc.internal.OracleTypes;

/**
 * DAO access to the acme_user table 
 * 
 * @author pgerringer
 *
 */
public class UserDAO implements DAO <UserBean, Integer> {

	/*
	 * (non-Javadoc)
	 * @see com.banking.dao.DAO#getAll()
	 */
	@Override
	public List<UserBean> getAll() {
	
		/*
		 * SQL for the callable statement
		 * 
		 * create or replace procedure all_user
		 *  (user_cur out sys_refcursor) as
		 * begin
		 * open user_cur for
		 * select user_id, first_name, last_name, login_id, password 
		 * from acme_user;
		 * end;
		 */
		
		List<UserBean> users = new ArrayList<UserBean>();
		try(Connection conn = ConnectionFactory.getInstance().getConnection()) {
			String sql = "{ call all_user(?) }";
			CallableStatement cs = conn.prepareCall(sql);
			cs.registerOutParameter(1, OracleTypes.CURSOR);
			cs.execute();
			
			ResultSet rs = (ResultSet) cs.getObject(1);				
			//ResultSet rs = (ResultSet) cs.executeQuery();
			
			while(rs.next()) {
				UserBean bean = new UserBean();
				bean.setID(rs.getInt(1));
				bean.setFirstName(rs.getString(2));
				bean.setLastName(rs.getString(3));
				bean.setLoginID(rs.getString(4));
				bean.setPassword(rs.getString(5));
				users.add(bean);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		// No reason to get all Users
		return users;
	}

	/*
	 * (non-Javadoc)
	 * @see com.banking.dao.DAO#getByID(java.io.Serializable)
	 */
	@Override
	public UserBean getByID(Integer id) {
		UserBean bean=null;
		
		try(Connection conn = ConnectionFactory.getInstance().getConnection()) {		
			String sql = "select * from acme_user where user_id = ?";
			
			// prepared statement to avoid mal sql injection
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setInt(1, id);
			
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				bean = new UserBean();
				bean.setID(rs.getInt(1));
				bean.setFirstName(rs.getString(2));
				bean.setLastName(rs.getString(3));
				bean.setLoginID(rs.getString(4));
				bean.setPassword(rs.getString(5));
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		return bean;
	}
	
	/**
	 * retrieves a user based on their login id "there can be only one"
	 * 
	 * @param id
	 * @return
	 */
	public UserBean getByLoginID(String id) {
		UserBean bean=null;
		
		try(Connection conn = ConnectionFactory.getInstance().getConnection()) {		
			String sql = "select * from acme_user where login_id = ?";

			// prepared statement to avoid mal sql injection
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setString(1, id);
			
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				bean = new UserBean();
				bean.setID(rs.getInt(1));
				bean.setFirstName(rs.getString(2));
				bean.setLastName(rs.getString(3));
				bean.setLoginID(rs.getString(4));
				bean.setPassword(rs.getString(5));
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
			
		return bean;
	}

	/*
	 * (non-Javadoc)
	 * @see com.banking.dao.DAO#insert(java.lang.Object)
	 */
	@Override
	public UserBean insert(UserBean obj) {
		try (Connection conn = ConnectionFactory.getInstance().getConnection()) {
			// key names indicates an autogenerated field so the value can be returned
			String sql = "insert into acme_user (first_name, last_name, login_id, password) values (?, ?, ?, ?)";
			String[] keyNames = {"user_id"};
			
			// prepared statement to avoid mal sql injection
			PreparedStatement ps = conn.prepareStatement(sql, keyNames);
			ps.setString(1, obj.getFirstName());
			ps.setString(2, obj.getLastName());
			ps.setString(3, obj.getLoginID());
			ps.setString(4, obj.getPassword());
			
			int numrows = ps.executeUpdate();
			if (numrows > 0) {
				ResultSet rs = ps.getGeneratedKeys();
				while (rs.next()) {
					obj.setID(rs.getInt(1));
				}
			}
			
		}
		catch (SQLIntegrityConstraintViolationException sicve) {
			System.out.println("User ID already exists, please try again.");
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		return obj;
	}

	/*
	 * (non-Javadoc)
	 * @see com.banking.dao.DAO#update(java.lang.Object)
	 */
	@Override
	public UserBean update(UserBean obj) {
		// will not be updating
		return null;
	}

	/*
	 * (non-Javadoc)
	 * @see com.banking.dao.DAO#delete(java.lang.Object)
	 */
	@Override
	public void delete(UserBean obj) {
		// will not be deleting
		
	}

	/*
	 * (non-Javadoc)
	 * @see com.banking.dao.DAO#getAll(java.io.Serializable)
	 */
	@Override
	public List<UserBean> getAll(Integer id) {
		// singleton User in the table.  no need for getAll by id
		return null;
	}

}
